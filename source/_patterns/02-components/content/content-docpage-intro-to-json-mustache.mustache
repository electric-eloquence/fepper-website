<h3>Introduction to JSON and Mustache</h3>
<p>At its core, <a href="https://www.json.org/json-en.html" target="_blank">JSON</a> is just a key-value store. This means that any datum in JSON has a key and a value. The key is the name of the datum, and the value is what is stored at that reference. Here's a simple example:</p>
<pre><code>{
  "answer": 42
}</code></pre>
<p>In this case, the key is <code>answer</code> and the value is <code>42</code>. Let's look at how we might reference this datum in a pattern.</p>
<p><a href="https://mustache.github.io/mustache.5.html" target="_blank">Mustache</a> is a language for so-called "logic-less templates." Variables in Mustache are denoted by double curly braces. For example:</p>
<pre><code>&lt;h1&gt;I am &lcub;&lcub; answer &rcub;&rcub;&lt;/h1&gt;</code></pre>
<p>The Mustache variable is <code>&lcub;&lcub; answer &rcub;&rcub;</code>. Note that <code>answer</code> matches the name of the key in our JSON example. When Fepper builds this pattern, the result will be:</p>
<pre><code>&lt;h1&gt;I am 42&lt;/h1&gt;</code></pre>
<p>Note that <code>&lcub;&lcub; answer &rcub;&rcub;</code> was replaced by the value for <code>answer</code> found in our JSON example.</p>
<h4>Nested Variables</h4>
<p>We may want our JSON data to adapt to the needs of a more complex site. We can create nested hierarchies like so:</p>
<pre><code>"life": {
  "answer": 21
},
"universe": {
  "answer": 14
},
"everything": {
  "answer": 7
}</code></pre>
<p>Note how the data are nested within separate keys. We can use the data thusly:</p>
<pre><code>&lcub;&lcub;# life &rcub;&rcub;
  &lt;span&gt;I was &lcub;&lcub; answer &rcub;&rcub;&lt;/span&gt;
&lcub;&lcub;/ life &rcub;&rcub;
&lcub;&lcub;# universe &rcub;&rcub;
  &lt;span&gt;in &lcub;&lcub; answer &rcub;&rcub; universes&lt;/span&gt;
&lcub;&lcub;/ universe &rcub;&rcub;
&lcub;&lcub;# everything &rcub;&rcub;
  &lt;span&gt;&lcub;&lcub; answer &rcub;&rcub; times&lt;/span&gt;
&lcub;&lcub;/ everything &rcub;&rcub;</code></pre>
<p>We can also write the variables as dot-delimited object properties:</p>
<pre><code>  &lt;span&gt;I was &lcub;&lcub; life.answer &rcub;&rcub;&lt;/span&gt;
  &lt;span&gt;in &lcub;&lcub; universe.answer &rcub;&rcub; universes&lt;/span&gt;
  &lt;span&gt;&lcub;&lcub; everything.answer &rcub;&rcub; times&lt;/span&gt;</code></pre>
<p>Either of these would be built as:</p>
<pre><code>  &lt;span&gt;I was 21&lt;/span&gt;
  &lt;span&gt;in 14 universes&lt;/span&gt;
  &lt;span&gt;7 times&lt;/span&gt;</code></pre>
<h4>Rendering HTML in Variables</h4>
<p>You may want to include HTML in your variables. By default, Mustache will convert special characters into HTML entities. For example, for this JSON:</p>
<pre><code>{
  "answer": "&lt;span&gt;42&lt;/span&gt;"
}</code></pre>
<p>If you wrote your template like:</p>
<pre><code>&lt;h1&gt;I am &lcub;&lcub; answer &rcub;&rcub;&lt;/h1&gt;</code></pre>
<p>It would be built as:</p>
<pre><code>&lt;h1&gt;I am &amp;lt;span&amp;&gt;42&amp;lt;/span&amp;gt;&lt;/h1&gt;</code></pre>
<p>In order to ensure that markup doesn't get converted, use <em>triple</em> curly braces:</p>
<pre><code>&lt;h1&gt;I am &lcub;&lcub;&lcub; answer &rcub;&rcub;&rcub;&lt;/h1&gt;</code></pre>
<p>Then it builds correctly:</p>
<pre><code>&lt;h1&gt;I am &lt;span&gt;42&lt;/span&gt;&lt;/h1&gt;</code></pre>
<h4>For Further Reference</h4>
<ul>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON" target="_blank">JSON as JavaScript Object Notation</a></li>
  <li><a href="https://www.json.org/example.html" target="_blank">JSON examples from json.org</a></li>
  <li><a href="https://mustache.github.io/mustache.5.html" target="_blank">Mustache</a></li>
  <li><a href="https://www.npmjs.com/package/feplet" target="_blank">Feplet</a></li>
</ul>
