<h3>Pseudo-Patterns</h3>
<p>Pseudo-patterns give the ability to quickly build multiple variants of an existing pattern.</p>
<h4>The Pseudo-Pattern File Naming Convention</h4>
<p></p>
<pre><code>[patternName]~[variantName].json</code></pre>
<p>The tilde (<code>~</code>) and <code>.json</code> file extension are the hints that Fepper uses to determine that this is a pseudo-pattern. The <code>patternName</code> tells Fepper which existing pattern it should use when rendering the pseudo-pattern. The JSON file itself works exactly like a <a href="{{ link.pages-pattern-data }}">pattern-specific JSON</a> file. It has the added benefit that the pseudo-pattern will also inherit values from the existing pattern's JSON data. (Data specific to the <a href="{{ link.pages-global-head-and-foot }}">global head or foot</a> will <em>not</em> be inherited and must be copied to the pseudo-pattern.)</p>
<h4>Adding Pseudo-Patterns to Your Project</h4>
<p>Adding a pseudo-pattern is as simple as naming it correctly and following the <a href="{{ link.pages-pattern-data }}">pattern-specific JSON file instructions</a> for organizing its content. Let's look at a simple example where we want to show an emergency notification on our homepage. Our <code>templates</code> directory might look like this:</p>
<pre><code>article.mustache
blog.mustache
homepage.mustache</code></pre>
<p>Our <code>homepage.mustache</code> template might look like this:</p>
<pre><code>&lt;div id="main-container"&gt;
  &lcub;&lcub;# emergency &rcub;&rcub;
    &lt;div class="emergency"&gt;Emergency!&lt;/div&gt;
  &lcub;&lcub;/ emergency &rcub;&rcub;
&lt;/div&gt;</code></pre>
<p>If there is no JSON data file giving a value for <code>emergency</code>, that section will never show when <code>homepage.mustache</code> gets rendered. We want to show <em>both</em> the regular and emergency states of the homepage, but we don't want to duplicate the entire <code>homepage.mustache</code> template. Duplicate changes nearly <em>always</em> get forgotten in future maintenance. So let's DRY (Don't Repeat Yourself) things up and add our pseudo-pattern:</p>
<pre><code>article.mustache
blog.mustache
homepage.mustache
homepage~emergency.json</code></pre>
<p>In our pseudo-pattern <code>homepage~emergency.json</code>, we add our <code>emergency</code> boolean:</p>
<pre><code>{
  "emergency": true
}</code></pre>
<p>Now when we build Fepper, we'll have our homepage template rendered twice: once as the regular pattern, and once as a pseudo-pattern showing the emergency section. Note that the pseudo-pattern will show up in the UI menu as "Homepage Emergency".</p>
<h4><s>Using Pseudo-Patterns as Included Partials</s></h4>
<p>Pseudo-patterns <strong>cannot</strong> be used as included partials. They are just logical extensions of variant JSON data, not actual patterns.</p>
<h4>Annotating Pseudo-Patterns</h4>
<p>Pseudo-patterns <em>can</em>, however, be annotated. Check the documentation on <a href="{{ link.pages-pattern-annotations }}">patterns annotations</a> to learn more.</p>
