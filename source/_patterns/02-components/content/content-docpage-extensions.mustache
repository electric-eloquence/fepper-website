<h3 id="extensions"><a id="extensions"></a>Extensions</h3><p>The <code>extend</code> directory is purposed for extending Fepper&#39;s functionality. 
Extensions can be contributed or custom. The <code>extend</code> directory will not be 
modified when updating Fepper.</p><h5 id="contributed-extensions">Contributed extensions:</h5><ul>
<li>Install and update contributed extensions with npm in the <code>extend</code> directory.</li>
<li>Add the tasks to <code>extend/contrib.js</code> (and <code>extend/auxiliary/auxiliary_contrib.js</code> 
if necessary) in order for Fepper to run them.</li>
<li>Contributed Fepper extensions can be found at <a href="https://www.npmjs.com/search?q=fepper%20extension" target="_blank">
https://www.npmjs.com/search?q=fepper%20extension</a></li>
</ul><h5 id="custom-extensions">Custom extensions:</h5><ul>
<li>Write custom extensions in the <code>extend/custom</code> directory.</li>
<li>Extensions require a file ending in &quot;~extend.js&quot; in order for Fepper to 
recognize their tasks.</li>
<li>The &quot;*~extend.js&quot; file can be directly under <code>extend/custom</code>, or nested one 
directory deep, but no deeper.</li>
<li>Add the tasks to <code>extend/custom.js</code> (and <code>extend/auxiliary/auxiliary_custom.js</code> 
if necessary) in order for Fepper to run them.</li>
<li>Fepper runs a self-contained instance of gulp to manage tasks. This gulp 
instance will be independent of any other gulp instance on your system.</li>
<li>For best results, set <code>const gulp = global.gulp</code>, not 
<code>const gulp = require(&#39;gulp&#39;)</code>.</li>
<li>The <code>fp</code> command is an alias for <code>gulp</code> (among other things). Any <code>fp</code> task 
can be included in a custom task.</li>
<li>Fepper only supports 
<a href="https://github.com/electric-eloquence/gulp#readme" target="_blank">gulp 3</a> 
syntax.</li>
</ul><p>It may be helpful to write help text for a custom extension, especially when a 
person other than the author uses it. To do this, create a custom task appended 
by &quot;:help&quot;.  Declare and log the help text as follows, and it will be output by 
running <code>fp extend:help</code>.</p><pre><code>&#39;use strict&#39;;

const gulp = global.gulp;

gulp.task(&#39;custom-task:help&#39;, function (cb) {
  let helpText = `
Fepper Custom Task Extension

Usage:
    &lt;task&gt; [&lt;additional args&gt;...]

Task and description:
    fp custom-task:help    Print usage and description of custom task.
`;

  console.log(helpText);
  cb();
});
</code></pre><h5 id="confs-and-prefs">Confs and prefs:</h5><p>You might need to access the values in the <code>conf.yml</code> and <code>pref.yml</code> files in 
order to write custom tasks. They are exposed through <code>global.conf</code> and 
<code>global.pref</code> (on the <code>global</code> Node object).</p><p>The values in <code>patternlab-config.json</code> are exposed through <code>global.conf.ui</code>. 
Please note that all paths in <code>patternlab-config.json</code> will be converted to 
absolute paths in <code>global.conf.ui</code>. Relative paths can be accessed through 
<code>global.conf.ui.pathsRelative</code>.</p><h5 id="utilities">Utilities:</h5><p>Common utilty functions for custom extensions are available from the
<a href="https://www.npmjs.com/package/fepper-utils" target="_blank">Fepper Utils</a>
npm.</p><h5 id="object-oriented-fepper">Object-oriented Fepper:</h5><p>Beneath the gulp tasking system lies object-oriented Fepper. Running any <code>fp</code> 
task instantiates the <code>Fepper</code> class. This instance is exposed through the 
<code>global.fepper</code> object. By directly accessing the <code>Fepper</code> instance, you can run 
any Fepper operation without gulp. Deeper within <code>Fepper</code> lies the <code>Patternlab</code> 
class. By directly accessing <code>Patternlab</code>, you can run any Pattern Lab 
operation without Fepper. The <code>Patternlab</code> instance is attached to Fepper as 
<code>global.fepper.ui.patternlab</code>. The <code>global.fepper</code> object can, of course, be 
easily inspected in a console.</p><p>If there is something you wish were different about the <code>Fepper</code> class, or any 
of its member classes, you can inherit from the class, and make whatever changes 
you wish, without worry that your changes will be overwritten by the next 
update.</p><p>Here is an example of overriding the <code>fp help</code> command:</p><ol>
<li>Create an <code>instance_file</code>. For this example, let&#39;s write it at 
<code>extend/custom/hack-help.js</code>.</li>
</ol><pre><code>&#39;use strict&#39;;

const FepperSuper = require(&#39;fepper&#39;);
const HelperSuper = require(&#39;fepper/core/tasks/helper&#39;);
const TasksSuper = require(&#39;fepper/core/tasks/tasks&#39;);

class Helper extends HelperSuper {
  constructor(options) {
    super(options);
  }

  main() {
    console.log(&#39;ASYNC ALL THE THINGS!&#39;);
  }
}

class Tasks extends TasksSuper {
  constructor(options) {
    super(options);
    this.helper = new Helper(this.options);
  }
}

module.exports = class Fepper extends FepperSuper {
  constructor(cwd) {
    super(cwd);
    this.tasks = new Tasks(this.options);
  }
}
</code></pre><ol start="2">
<li>Declare <code>instance_file</code> in <code>pref.yml</code>.</li>
</ol><pre><code>instance_file: extend/custom/hack-help.js
</code></pre><ol start="3">
<li>Run <code>fp help</code> on the command line. It should log <a href="https://www.npmjs.com/package/gulp4-run-sequence#why-the-culinary-task-names" target="_blank">
"ASYNC ALL THE THINGS!"</a></li>
</ol><p>Hackers wishing to view the code for any of these classes will find that the ES6 
syntax and object-orientation makes the code mostly self-documenting. The entry 
point to the <code>Fepper</code> class is in 
<a href="https://github.com/electric-eloquence/fepper-npm/blob/dev/core/fepper.js" target="_blank">
Fepper NPM at <code>core/fepper.js</code></a>.</p><p>There is currently no public API for object-oriented Fepper. To express demand 
for one, 
<a href="https://github.com/electric-eloquence/fepper/issues" target="_blank">
please open an issue</a>.</p>