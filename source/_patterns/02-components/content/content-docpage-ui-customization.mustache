<h3 id="ui-customization"><a id="ui-customization"></a>UI Customization</h3><p>All aspects of the UI are available for customization. For example, the toolbar 
can accept additions, modifications, and deletions per the needs of end-users. 
The UI markup is compiled by recursive, functional React calls. The recursion 
tree is reflected by the directory structure containing the modules which 
compose the UI. To override any given module, copy the directory structure 
leading to the module from 
<a href="https://github.com/electric-eloquence/fepper-npm/tree/dev/ui/core/styleguide/index/html" target="_blank">
https&colon;//github.com/electric-eloquence/fepper-npm/tree/dev/ui/core/styleguide/index/html</a> 
to <code>source/_ui/index/html</code>, respective to your implementation. Modifications to 
modules in that directory will override the corresponding modules in core. 
Additions (so long as they are correctly nested) will also be recognized.</p><p>A working example of UI customization can be found at 
<a href="https://github.com/electric-eloquence/fepper-drupal/blob/dev/source/_ui/index/html/00-head/head.component.js" target="_blank">
https&colon;//github.com/electric-eloquence/fepper-drupal/blob/dev/source/_ui/index/html/00-head/head.component.js</a>. 
The Fepper for Drupal project overrides its HTML title to read &quot;Fepper D8&quot; 
instead of &quot;Fepper&quot;. In order to do so, it has the <code>head.component.js</code> module 
nested in directories that correspond to the tags that nest the <code>head</code> HTML 
element. Both <code>head.component.js</code> and its nesting directories must be named 
similarly to their corresponding elements. <code>.component.js</code> indicates that the 
file is a module to be rendered by React. 
<a href="https://reactjs.org/docs/dom-elements.html" target="_blank">
It must export properties that <code>React.createElement()</code> understands</a>. 
The numeric prefix to <code>00-head</code> orders it to precede <code>01-foot</code>, even though 
&quot;foot&quot; precedes &quot;head&quot; alphabetically.</p><p>In this example, by allowing customizations in the <code>00-head</code> directory separate 
from the core components, core updates will be respected for all components 
except for the HTML head.</p><p>Browser JavaScript and CSS customizations can (and should) be componentized 
this way as well. While a head element is unlikely to have associated scripts or 
styles, the UI&#39;s main element does have its scripts and styles componentized as 
<a href="https://github.com/electric-eloquence/fepper-npm/tree/dev/ui/core/styleguide/index/html/01-body/40-main" target="_blank">
<code>main.js</code> and <code>main.css</code> in <code>index/html/01-body/40-main</code></a>. A big advantage 
for this type of componentization comes when elements are renamed or deleted. 
When you rename or delete the element, are you <em>absolutely</em> sure you&#39;ll rename 
or delete accordingly in some far-flung, monolithic script or style file?</p><p>Alas, no one should be <em>forced</em> to componentize this way. Generic modifications 
to UI scripts can be added to <code>source/_scripts/ui-extender.js</code>.</p><p>Similarly, generic modifications to UI styles can be added to 
<code>source/_styles/pattern-scaffolding.css</code>. (The file is named this way to adhere 
to the Pattern Lab convention on defining pattern states. It should not be 
relied on for pattern scaffolding.)</p><p>View All markup can also be overridden by copying the .mustache files in 
<a href="https://github.com/electric-eloquence/fepper-npm/tree/dev/ui/core/styleguide/viewall" target="_blank">
https&colon;//github.com/electric-eloquence/fepper-npm/tree/dev/ui/core/styleguide/viewall</a> 
and pasting them to <code>source/_ui/viewall</code> (nested correctly). Modifications will 
then be recognized and displayed in the UI. (No additions are allowed.) Custom 
View All styles can be added to <code>source/_styles/pattern-scaffolding.css</code>.</p><p>You will need to compile the UI in order for the browser to pick up custom 
changes to the UI:</p><pre><code>fp ui:compile</code></pre><p>New UI customizations will not be picked up simply by restarting Fepper.</p><p>The UI exposes these additional tasks:</p><ul>
<li><code>fp ui:build</code> - Build the patterns and output them to the public directory</li>
<li><code>fp ui:clean</code> - Delete all patterns in the public directory</li>
<li><code>fp ui:compile</code> - Compile the Fepper User Interface from its components</li>
<li><code>fp ui:copy</code> - Copy frontend files (_assets, _scripts, _styles) to the 
public directory</li>
<li><code>fp ui:copy-styles</code> - Copy _styles to the public directory (for injection 
into the browser without a refresh)</li>
<li><code>fp ui:help</code> - Get more information about Fepper UI CLI commands</li>
</ul>